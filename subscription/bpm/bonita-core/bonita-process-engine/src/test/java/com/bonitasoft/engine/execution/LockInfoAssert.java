package com.bonitasoft.engine.execution;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link LockInfo} specific assertions - Generated by CustomAssertionGenerator.
 */
public class LockInfoAssert extends AbstractAssert<LockInfoAssert, LockInfo> {

  /**
   * Creates a new <code>{@link LockInfoAssert}</code> to make assertions on actual LockInfo.
   * @param actual the LockInfo we want to make assertions on.
   */
  public LockInfoAssert(LockInfo actual) {
    super(actual, LockInfoAssert.class);
  }

  /**
   * An entry point for LockInfoAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myLockInfo)</code> and get specific assertion with code completion.
   * @param actual the LockInfo we want to make assertions on.
   * @return a new <code>{@link LockInfoAssert}</code>
   */
  public static LockInfoAssert assertThat(LockInfo actual) {
    return new LockInfoAssert(actual);
  }

  /**
   * Verifies that the actual LockInfo's id is equal to the given one.
   * @param id the given id to compare the actual LockInfo's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual LockInfo's id is not equal to the given one.
   */
  public LockInfoAssert hasId(long id) {
    // check that actual LockInfo we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    long actualId = actual.getId();
    if (actualId != id) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual LockInfo's tenantId is equal to the given one.
   * @param tenantId the given tenantId to compare the actual LockInfo's tenantId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual LockInfo's tenantId is not equal to the given one.
   */
  public LockInfoAssert hasTenantId(long tenantId) {
    // check that actual LockInfo we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected tenantId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    long actualTenantId = actual.getTenantId();
    if (actualTenantId != tenantId) {
      failWithMessage(assertjErrorMessage, actual, tenantId, actualTenantId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual LockInfo's type is equal to the given one.
   * @param type the given type to compare the actual LockInfo's type to.
   * @return this assertion object.
   * @throws AssertionError - if the actual LockInfo's type is not equal to the given one.
   */
  public LockInfoAssert hasType(String type) {
    // check that actual LockInfo we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected type of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualType = actual.getType();
    if (!Objects.areEqual(actualType, type)) {
      failWithMessage(assertjErrorMessage, actual, type, actualType);
    }

    // return the current assertion for method chaining
    return this;
  }

}
